#Predicting Phone Sentiment

# Set up Parallel Processing for multiple cores 
library(foreach)
library(iterators)
library(parallel)
library(doParallel)
detectCores() 
cl <- makeCluster(3)
registerDoParallel(cl)
getDoParWorkers()
stopCluster(cl) 

#install caret
install.packages("readr")
library(readr)
library(caret)
install.packages("lattice")
install.packages("ggplot2")
install.packages("plotly")
library(plotly)
install.packages("ggplot2")

#import iPhone small matrix data
iphonedf <- read.csv("iphone_smallmatrix_labeled_8d.csv")
summary(iphonedf)
str(iphonedf)

##create new level of sentiment 1-4
library(dplyr)
iphoneRC <- iphonedf
#recode to combine factor levels 0&1 and 4&5 
iphoneRC$iphonesentiment <- recode(iphonedf$iphonesentiment, '0' = 1, '1' = 1, '2' = 2, '3' = 3, '4' = 4, '5' = 4)
#inspect results
summary(iphoneRC)
str(iphoneRC)
iphoneRC$iphonesentiment <- as.factor(iphoneRC$iphonesentiment)
View(iphoneRC)

#import Galaxy small matrix data set
galaxydf <- read.csv("galaxy_smallmatrix_labeled_9d.csv")
summary(galaxydf)
str(galaxydf)
#Create galaxyRC data set
galaxyRC <- galaxydf
galaxyRC$galaxysentiment <- recode(galaxyRC$galaxysentiment, '0' = 1, '1' = 1, '2' = 2, '3' = 3, '4' = 4, '5' = 4)
summary(galaxyRC)
str(galaxyRC)
galaxyRC$galaxysentiment <- as.factor(galaxyRC$galaxysentiment)
View(galaxyRC)

#Plot iphone Sentiment 
p <- plot_ly(iphonedf, x= ~iphonedf$iphonesentiment, type='histogram')
p
#find missing values
is.na(iphonedf$iphonesentiment)
table(iphonedf$iphonesentiment, exclude = NULL)
#plot iphoneRC sentiment
pRC <- plot_ly(iphoneRC, x = ~iphoneRC$iphonesentiment, type = 'histogram')
pRC

#plot galaxy sentiment
pg <-plot_ly(galaxydf, x = ~galaxydf$galaxysentiment, type = 'histogram')
pg
#plot galaxyRC sentiment
pgRC <- plot_ly(galaxyRC, x = ~galaxyRC$galaxysentiment, type = 'histogram')
pgRC

##Feature Selection##
#Examine iphone Correlation 
corrData <- cor(iphonedf)
options(max.print = 10000)
corrData
View(corrData)

#examine galaxy correlation
corrDataG <- cor(galaxydf)
corrDataG
write.csv(corrDataG, "galaxyCorrData.csv")

#Visulaize Corr Matirx
write.csv(corrData, "iphoneCorrData.csv")
install.packages("corrplot")
library(corrplot)
#iphone correlation plot
corrplot(corrData)
#galaxy correlation plot
corrplot(corrDataG)

#find highly corelated attributes iphone
#automated way in R using findCorrelation()
correlationsIphone <- cor(iphonedf)
corrplot(correlationsIphone, order = "hclust")
highCorrIphone <- findCorrelation(correlationsIphone, cutoff = .85)
iphoneCOR <- iphonedf[,-highCorrIphone]
View(iphoneCOR)
str(iphoneCOR)
write.csv(iphoneCOR, "iphoneCORminus.85.csv")

#find highly corelated attributes galaxy
correlationsGalaxy <- cor(galaxydf)
corrplot(correlationsGalaxy, order = "hclust")
highCorrGalaxy <- findCorrelation(correlationsGalaxy, cutoff = .85)
galaxyCOR <- galaxydf[,-highCorrGalaxy]
str(galaxyCOR)
write.csv(galaxyCOR, "galaxyCORminus.85.csv")

##Examine Feature Variance
#iphone
#saveMetrics = TRUE, returns table w/freq rati, % unique, zero variance and near zero variance
nzvMetrics <- nearZeroVar(iphonedf, saveMetrics = TRUE)
nzvMetrics
write.csv(nzvMetrics, "nzvMetrics.csv")
#saveMetrics = FALSE returns a vector
nzv <- nearZeroVar(iphonedf, saveMetrics = FALSE)
nzv
#align nzv object with nzvMetrics results, YES
#create a new data set and remove near zero variance features
iphoneNZV <- iphonedf[,-nzv]
iphoneNZV
str(iphoneNZV) 

#galaxy NZV
nzvMetricsG <- nearZeroVar(galaxydf, saveMetrics = TRUE)
nzvMetricsG
write.csv(nzvMetricsG, "nzvMetricsGalaxy.csv")
#saveMetrics = FALSE returns a vector
nzvG <- nearZeroVar(galaxydf, saveMetrics = FALSE)
nzvG
#align nzv object with nzvMetrics results
#create new data set and remove near zero variance features
galaxyNZV <- galaxydf[,-nzvG]
galaxyNZV
str(galaxyNZV)


##Recursive Feature Elimination 
#iphone
#sample data before using RFE
set.seed(2727)
iphoneSample <- iphonedf[sample(1:nrow(iphonedf), 1000, replace = FALSE),]
str(iphoneSample)
#setup refControl with randomForest, repeated cross validation and no updates
ctrl <- rfeControl(functions = rfFuncs,
                   method = "repeatedcv",
                   repeats = 5,
                   verbose = FALSE)
#Use rfe and omit the dependent variable (attribute 59 iphonesentiment)
rfeResults <- rfe(iphoneSample[,1:58],
                  iphoneSample$iphonesentiment,
                  sizes = (1:58),
                  rfeControl = ctrl)
rfeResults
#plot results
plot(rfeResults, type = c("g", "o"))
#create a new data set with rfe recommeded features
iphoneRFE <- iphonedf[,predictors(rfeResults)]
#add the dependent variable to iphoneRFE
iphoneRFE$iphonesentiment <- iphonedf$iphonesentiment
#review outcome
str(iphoneRFE)
getwd()
write.csv(iphoneRFE, "iphoneRFEdataset.csv")

#RFE iphoneRC
iphoneSampleRC <- iphoneRC[sample(1:nrow(iphoneRC), 1000, replace = FALSE),]
#setup refControl with randomForest, repeated cross validation and no updates
ctrl <- rfeControl(functions = rfFuncs,
                   method = "repeatedcv",
                   repeats = 5,
                   verbose = FALSE)
#Use rfe and omit the dependent variable (attribute 59 iphonesentiment)
rfeResultsRC <- rfe(iphoneSampleRC[,1:58],
                  iphoneSampleRC$iphonesentiment,
                  sizes = (1:58),
                  rfeControl = ctrl)
#results
rfeResultsRC
#plot results
plot(rfeResultsRC, type = c("g", "o"))
#create a new data set with rfe recommeded features
iphoneRCRFE <- iphoneRC[,predictors(rfeResultsRC)]
#add the dependent variable to iphoneRFE
iphoneRCRFE$iphonesentiment <- iphoneRC$iphonesentiment


#Recursive feature Engineering Galaxy
set.seed(2727)
galaxySample <- galaxydf[sample(1:nrow(galaxydf), 1000, replace = FALSE),]
str(galaxySample)
#setup refControl with randomForest, repeated cross validation and no updates
ctrl <- rfeControl(functions = rfFuncs,
                   method = "repeatedcv",
                   repeats = 5,
                   verbose = FALSE)
#use rfe() function and omit the y variable
rfeResultsG <- rfe(galaxySample[,1:58],
                   galaxySample$galaxysentiment,
                   sizes = (1:58),
                   rfeControl = ctrl)
rfeResultsG
# Recursive feature engineering galaxyRC
set.seed(2727)
galaxySampleR

#plot results galaxy 
plot(rfeResults, type = c("g", "o"))
#create RFE galaxy data set
galaxyRFE <- galaxydf[,predictors(rfeResultsG)]
#add dependent variable to RFE data set
galaxyRFE$galaxysentiment <- galaxydf$galaxysentiment
#review galaxyRFE outcome
str(galaxyRFE)
write.csv(galaxyRFE, "galaxyRFE.csv")

#RFE galaxyRC
###
galaxySampleRC <- galaxyRC[sample(1:nrow(galaxyRC), 1000, replace = FALSE),]
#setup refControl with randomForest, repeated cross validation and no updates
ctrl <- rfeControl(functions = rfFuncs,
                   method = "repeatedcv",
                   repeats = 5,
                   verbose = FALSE)
#Use rfe and omit the dependent variable (attribute 59 iphonesentiment)
rfeResultsGRC <- rfe(galaxySampleRC[,1:58],
                     galaxySampleRC$galaxysentiment,
                    sizes = (1:58),
                    rfeControl = ctrl)
#results
rfeResultsGRC
#plot results
plot(rfeResultsGRC, type = c("g", "o"))
#create a new data set with rfe recommeded features
galaxyRCRFE <- galaxyRC[,predictors(rfeResultsGRC)]
#add the dependent variable to iphoneRFE
galaxyRCRFE$galaxysentiment <- galaxyRC$galaxysentiment
View(galaxyRCRFE)

##Model Development and Evaluation
#iphone
#caret package
#convert y to factor
iphonedf$iphonesentiment <- as.factor(iphonedf$iphonesentiment)
#Define an 70%/30% train/test split (iphonedf)
inTraining <- createDataPartition(iphonedf$iphonesentiment, p = .7, list = FALSE)
training <- iphonedf[inTraining,]
testing <- iphonedf[-inTraining,]
#define 70/30 train/test split (iphoneRC)
inTrainingRC <- createDataPartition(iphoneRC$iphonesentiment, p = .7, list = FALSE)
trainingRC <- iphoneRC[inTrainingRC,]
testingRC <- iphoneRC[-inTrainingRC,]
#define 70/30 train/test spilt (iphoneRCRFE
inTrainingRCRFE <- createDataPartition(iphoneRCRFE$iphonesentiment, p = .7, list = FALSE)
trainingRCRFE <- iphoneRCRFE[inTrainingRCRFE,]
testingRCRFE <- iphoneRCRFE[-inTrainingRCRFE,]

#Define train and test set (iphoneCOR)
#convert y to factor
iphoneCOR$iphonesentiment <- as.factor(iphoneCOR$iphonesentiment)
inTrainingCOR <- createDataPartition(iphoneCOR$iphonesentiment, p = .7, list = FALSE)
trainingCOR <- iphoneCOR[inTrainingCOR,]
testingCOR <- iphoneCOR[-inTrainingCOR,]
#Define train and test set (iphoneNZV)
#convert y to factor
iphoneNZV$iphonesentiment <- as.factor(iphoneNZV$iphonesentiment)
inTrainingNZV <- createDataPartition(iphoneNZV$iphonesentiment, p = .7, list = FALSE)
trainingNZV <- iphoneNZV[inTrainingNZV,]
testingNZV <- iphoneNZV[-inTrainingNZV,]
#Define train and test set (iphoneRFE)
#Convert y to factor
iphoneRFE$iphonesentiment <- as.factor(iphoneRFE$iphonesentiment)
inTrainingRFE <- createDataPartition(iphoneRFE$iphonesentiment, p = .7, list = FALSE)
trainingRFE <- iphoneRFE[inTrainingRFE,]
testingRFE <- iphoneRFE[-inTrainingRFE,]

##galaxy
#galaxy train/test split with feautre engineered data sets
galaxydf$galaxysentiment <- as.factor(galaxydf$galaxysentiment)
#define train/test spilt 70/30
inTrainingG <- createDataPartition(galaxydf$galaxysentiment, p = .7, list = FALSE)
trainingG <- galaxydf[inTrainingG,]
testingG <- galaxydf[-inTrainingG,]
#GalaxyRC train/test split 
inTrainingGRC <- createDataPartition(galaxyRC$galaxysentiment, p = .7, list = FALSE)
trainingGRC <- galaxyRC[inTrainingGRC,]
testingGRC <- galaxyRC[-inTrainingGRC,]
#galaxyRCRFE train/test split
inTrainingGRCRFE <- createDataPartition(galaxyRCRFE$galaxysentiment, p = .7, list = FALSE)
trainingGRCRFE <- galaxyRCRFE[inTrainingGRCRFE,]
testingGRCRFE <- galaxyRCRFE[-inTrainingGRCRFE,]
#define train/test galaxyCOR
galaxyCOR$galaxysentiment <- as.factor(galaxyCOR$galaxysentiment)
inTrainingGCOR <- createDataPartition(galaxyCOR$galaxysentiment, p = .7, list = FALSE)
trainingGCOR <- galaxyCOR[inTrainingGCOR,]
testingGCOR <- galaxyCOR[-inTrainingGCOR,]
#define train/test galaxyNZV
galaxyNZV$galaxysentiment <- as.factor(galaxyNZV$galaxysentiment)
inTrainingGNZV <- createDataPartition(galaxyNZV$galaxysentiment, p = .7, list = FALSE)
trainingGNZV <- galaxyNZV[inTrainingGNZV,]
testingGNZV <- galaxyNZV[-inTrainingGNZV,]
#define train/test galaxyRFE
galaxyRFE$galaxysentiment <- as.factor(galaxyRFE$galaxysentiment)
inTrainingGRFE <- createDataPartition(galaxyRFE$galaxysentiment, p = .7, list = FALSE)
trainingGRFE <- galaxyRFE[inTrainingGRFE,]
testingGRFE <- galaxyRFE[-inTrainingGRFE,]


#install c5.0, 10-fold CV, AutoTune, tuneLength = 2
install.packages("c50")
install.packages("inum")
library(C50)
#10-Fold CV
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
#winnow adjustment 
c50grid <- expand.grid(.winnow = c(TRUE, FALSE))
#Model 5.0
#train c5.0 w/tuneLength = 2, model 5
set.seed(2727)
c50fit1 <- train(iphonesentiment~., data = training, method = "C5.0", 
                 trControl = fitControl, 
                 tunegrid = c50grid, 
                 tuneLength = 2,
                 preProc = c("center", "scale"))
c50fit1

#model 5.0 GALAXy
set.seed(2727)
c50fitG1 <- train(galaxysentiment~., data = trainingGRCRFE, method = "C5.0",
                  trControl = fitControl,
                  tunegrid = c50grid,
                  tuneLength = 2, 
                  preProc = c("center", "scale"))
c50fitG1

#Random Forest iPhonedf
set.seed(2727)
#rfgrid <- expand.grid(mtry = c(1,2,3,4,5))
rffit1 <- train(iphonesentiment~., data = training, method = "rf",
                trControl = fitControl,
                #tuneGrid = rfgrid,
                preProc = c("center", "scale"))
rffit1
#RondomForest iphoneRC
set.seed(2727)
rffitRC <- train(iphonesentiment~., data = trainingRC, method = 'rf',
                 trControl = fitControl,
                 preProc = c("center", "scale"))
rffitRC
#RandomForest iphoneRCRFE
set.seed(2727)
rffitRCRFE <- train(iphonesentiment~., data = trainingRCRFE, method = 'rf',
                    trControl = fitControl,
                    preProc = c("center", "scale"))
rffitRCRFE

##Random Forest on Feature Engineered iPhone Sets
#RF on trainingCOR data set
rffitCOR <- train(iphonesentiment~., data = trainingCOR, method = "rf",
                  trControl = fitControl,
                  preProc = c("center", "scale"))
rffitCOR
#RF on trainingNZV data set
rffitNZV <- train(iphonesentiment~., data = trainingNZV, method = "rf",
                  trControl = fitControl,
                  preProc = c("center", "scale"))
rffitNZV
#RF on trainingRFE data set
rffitRFE <- train(iphonesentiment~., data = trainingRFE, method = "rf",
                  trControl = fitControl,
                  prePRoc = c("center", "scale"))
rffitRFE
varImp(rffitRFE)


#Random Forest #Galaxy 
set.seed(2727)
rffitG1 <- train(galaxysentiment~., data = trainingG, method = "rf",
                 trControl = fitControl,
                 preProc = c("center", "scale"))
rffitG1
#Random Forest on galaxyRC
rffitGRC <- train(galaxysentiment~., data = trainingGRC, method = "rf",
                  trControl = fitControl,
                  preProc = c("center", "scale"))
rffitGRC
#Random Forest on galaxyRCRFE
rffitGRCRFE <- train(galaxysentiment~., data = trainingGRCRFE, method = "rf",
                     trControl = fitControl,
                     preProc = c("center", "scale"))
rffitGRCRFE
#Random Forest on Feaute Engineered Galaxy Data Sets
#RF on trainingGCOR galaxy data set
rffitGCOR <- train(galaxysentiment~., data = trainingGCOR, method = "rf",
                   trControl = fitControl,
                   preProc = c("center", "scale"))
rffitGCOR
#RF on trainingGNZV galaxy data set
rffitGNZV <- train(galaxysentiment~., data = trainingGNZV, method = "rf",
                   trControl = fitControl,
                   preProc = c("center", "scale"))
rffitGNZV
#RF on trainingGRFE galaxy data set
rffitGRFE <- train(galaxysentiment~., data = trainingGRFE, method = "rf",
                   trControl = fitControl,
                   preProc = c("center", "scale"))
rffitGRFE

#Support Vector Machine (SVM)
install.packages("e1071")
library(e1071)
svmfit1 <- train(iphonesentiment~., data = training, method = "svmRadial",
                 trControl = fitControl,
                 tuneLength = 2,
                 preProc = c("center", "scale"))
svmfit1
##SVM Galaxy 
svmfitG1 <- train(galaxysentiment~., data = trainingG, method = "svmRadial",
                  trControl = fitControl,
                  tuneLength = 2,
                  preProc = c("center", "scale"))
svmfitG1

#KNN
#iphone
install.packages("kknn")
library(kknn)
knnfit1 <- train(iphonesentiment~., data = training, method = "kknn",
                 trControl = fitControl,
                 preProc = c("center", "scale"))
knnfit1
#KNN Galaxy 
knnfitG1 <- train(galaxysentiment~., data = trainingG, method = "kknn",
                  trControl = fitControl,
                  preProc = c("center", "scale"))
knnfitG1

#iPhone
#prediction on "out of box" test set
predictrffit1 <- predict(rffit1, testing)
predictrffit1
summary(predictrffit1)
postResample(pred = predictrffit1, obs = testing$iphonesentiment)

#prediction using iphoneRFE test set 
predictrffitRFE <- predict(rffitRFE, testingRFE)
predictrffitRFE
#show results
summary(predictrffitRFE)
#show accuracy
postResample(pred = predictrffitRFE, obs = testingRFE$iphonesentiment)

#create confusion matrix with random forest predictions
cmRF <- confusionMatrix(predictrffit1, testing$iphonesentiment)
cmRF
#create confusion matrix with predictrffitRFE predictions
cmRFRFE <- confusionMatrix(predictrffitRFE, testingRFE$iphonesentiment)
cmRFRFE

#Galaxy Prediction on df data set
predictrffitG1 <- predict(rffitG1, testingG)
predictrffitG1
summary(predictrffitG1)
postResample(pred = predictrffitG1, obs = testingG$galaxysentiment)
#Galaxy prediction on RFE data set
predictrffitGRFE <- predict(rffitGRFE, testingGRFE)
predictrffitGRFE
summary(predictrffitGRFE)
postResample(pred = predictrffitGRFE, obs = testingGRFE$galaxysentiment)

#Confusion Matrix with galaxydf random forest predcitions
cmGRF <- confusionMatrix(predictrffitG1, testingG$galaxysentiment)
cmGRF
#Confusion MAtrix with galaxyRFE random forest predictions
cmGRFRFE <- confusionMatrix(predictrffitGRFE, testingGRFE$galaxysentiment)
cmGRFRFE

#iphoneRCRFE prediction
predictrffitRCRFE <- predict(rffitRCRFE, testingRCRFE)
predictrffitRCRFE
summary(predictrffitRCRFE)
postResample(pred = predictrffitRCRFE, obs = testingRCRFE$iphonesentiment)
varImp(rffitRCRFE)
#Confusion Matrix with iphoneRCRFE prediction
cmRCRFE <- confusionMatrix(predictrffitRCRFE, testingRCRFE$iphonesentiment)
cmRCRFE

#iphoneRCRFE prediction
predictrffitGRCRFE <- predict(rffitGRCRFE, testingGRCRFE)
predictrffitGRCRFE
summary(predictrffitGRCRFE)
postResample(pred = predictrffitGRCRFE, obs = testingGRCRFE$galaxysentiment)
varImp(rffitGRCRFE)
#Confusion Matrix with iphoneRCRFE prediction
cmGRCRFE <- confusionMatrix(predictrffitGRCRFE, testingGRCRFE$galaxysentiment)
cmGRCRFE
#iphone
#import LargeMatrix with iphonesentiment column added on the end
iphoneLargeMatrix <- read.csv("iphoneLargeMatrix.csv")
str(iphoneLargeMatrix)
iphoneLargeMatrix$iphonesentiment <- as.factor(iphoneLargeMatrix$iphonesentiment)
View(iphoneLargeMatrix)
#find missing values
is.na(iphoneLargeMatrix$iphonesentiment)
table(iphoneLargeMatrix$iphonesentiment, exclude = NULL)
#predict iphoneSentiment
predictiphoneLM <- predict(rffitRFE, iphoneLargeMatrix)
predictiphoneLM
#show results
summary(predictiphoneLM)
#put predicted results in predicted sentiment column 
iphoneLMoutput <- iphoneLargeMatrix
iphoneLMoutput$iphonesentiment <- NULL
iphoneLMoutput$PREDiphonesentiment <- predictiphoneLM
write.csv(iphoneLMoutput, "iphoneLMoutputResultsRCRFE.csv")

#galaxy
#import LargeMatrix with galaxysentiment column added on end 
galaxyLargeMatrix <- read.csv("galaxyLargeMatrix.csv")
str(galaxyLargeMatrix)
galaxyLargeMatrix$galaxysentiment <- as.factor(galaxyLargeMatrix$galaxysentiment)
#predict galaxy sentiment
predictgalaxyLM <- predict(rffitGRFE, galaxyLargeMatrix)
predictgalaxyLM
summary(predictgalaxyLM)
#put predicted values in glaaxy Large Matrix
galaxyLMoutput <- galaxyLargeMatrix
galaxyLMoutput$galaxysentiment <- NULL
galaxyLMoutput$PREDgalaxysentiment <- predictgalaxyLM
write.csv(galaxyLMoutput, "galaxyLMoutputResults.csv")

#iphone Predict iphoneRCRFE
getwd()
write.csv(iphoneRCRFE, "iphoneRCRFE.csv")
iphoneRCRFELargeMatrix <- read.csv("iphoneLargeMatrixRCRFE.csv")
str(iphoneRCRFELargeMatrix)
iphoneRCRFELargeMatrix$iphonesentiment <- as.factor(iphoneRCRFELargeMatrix$iphonesentiment)
#predict iphoneRCRFE sentiment on LM
predictiphoneRCRFELM <- predict(rffitRCRFE, iphoneRCRFELargeMatrix)
predictiphoneRCRFELM
summary(predictiphoneRCRFELM)
#put predicted values in glaaxy Large Matrix
iphoneLMRCRFEoutput <- iphoneRCRFELargeMatrix
iphoneLMRCRFEoutput$iphonesentiment <- NULL
iphoneLMRCRFEoutput$PREDiphonesentiment <- predictiphoneRCRFELM
write.csv(iphoneLMRCRFEoutput, "iphoneLMRCRFEoutput.csv")

#galaxy Predict galaxyRCRFE
write.csv(galaxyRCRFE, "galaxyRCRFE.csv")
galaxyLargeMatrixRCRFE <- read.csv("galaxyLargeMatrixRCRFE.csv")
str(galaxyLargeMatrixRCRFE)
galaxyLargeMatrixRCRFE$galaxysentiment <- as.factor(galaxyLargeMatrixRCRFE$galaxysentiment)
#predict galaxyRCRFE sentiment on LM
predictgalaxyRCRFELM <- predict(rffitGRCRFE, galaxyLargeMatrixRCRFE)
predictgalaxyRCRFELM
summary(predictgalaxyRCRFELM)
#put predicted values in glaaxy Large Matrix
galaxyLMRCRFEoutput <- galaxyLargeMatrixRCRFE
galaxyLMRCRFEoutput$galaxysentiment <- NULL
galaxyLMRCRFEoutput$PREDgalaxysentiment <- predictgalaxyRCRFELM
write.csv(galaxyLMRCRFEoutput, "galaxyLMRCRFEoutput.csv")










#Principal Component Analysis
#data = training and testing from iphoneDF (no feature selection) 
# create object containing centered, scaled PCA components from training set
# excluded the dependent variable and set threshold to .95
#iphone
preprocessParams <- preProcess(trainingRC[,-59], method=c("center", "scale", "pca"), thresh = 0.95)
print(preprocessParams)
# use predict to apply pca parameters, create training, exclude dependant
train.pca <- predict(preprocessParams, trainingRC[,-59])
# add the dependent to training
train.pca$iphonesentiment <- trainingRC$iphonesentiment
# use predict to apply pca parameters, create testing, exclude dependant
test.pca <- predict(preprocessParams, testingRC[,-59])

# add the dependent to training
test.pca$iphonesentiment <- testingRC$iphonesentiment
# inspect results
str(train.pca)
str(test.pca)

#MODEL PCA small matrix 
set.seed(2727)
rffitPCA <- train(iphonesentiment~., data = train.pca, method = "rf",
                  trControl = fitControl,
                  preProc = c("center", "scale"))
rffitPCA

#predict with iphone PCA tets set 
predictrffitPCA <- predict(rffitPCA, test.pca)
predictrffitPCA
summary(predictrffitPCA)
postResample(pred = predictrffitPCA, obs = test.pca$iphonesentiment)
varImp(rffitPCA)
#Confusion Matrix with iphoneRCRFE prediction
cmRCPCA <- confusionMatrix(predictrffitPCA, test.pca$iphonesentiment)
cmRCPCA

#predict PCA results in LM
LargeMatrixPCA <- read.csv("LargeMatrix.csv")
str(LargeMatrixPCA)
LargeMatrixPCA$iphonesentiment <- as.factor(LargeMatrixPCA$iphonesentiment)

inTrainingPCA <- createDataPartition(LargeMatrixPCA$iphonesentiment, p = .7, list = FALSE)
trainingPCA <- LargeMatrixPCA[inTrainingPCA,]
testingPCA <- LargeMatrixPCA[-inTrainingPCA,]

#PCA
preprocessParamsLM <- preProcess(LargeMatrixPCA[,-59], method=c("center", "scale", "pca"), thresh = 0.95)
print(preprocessParamsLM)
trainLM.pca <- predict(preprocessParamsLM, trainingPCA[,-59])
# add the dependent to training
trainLM.pca$iphonesentiment <- trainingPCA$iphonesentiment
# use predict to apply pca parameters, create testing, exclude dependant
testLM.pca <- predict(preprocessParamsLM, testingPCA[,-59])
# add the dependent to training
testLM.pca$iphonesentiment <- testingPCA$iphonesentiment
# inspect results
str(trainLM.pca)
str(testLM.pca)


#PCA
#galaxy
preprocessParamsG <- preProcess(trainingGRC[,-59], method=c("center", "scale", "pca"), thresh = 0.95)
print(preprocessParamsG)
# use predict to apply pca parameters, create training, exclude dependant
trainG.pca <- predict(preprocessParamsG, trainingGRC[,-59])
# add the dependent to training
trainG.pca$galaxysentiment <- trainingGRC$galaxysentiment
# use predict to apply pca parameters, create testing, exclude dependant
testG.pca <- predict(preprocessParamsG, testingGRC[,-59])

# add the dependent to training
testG.pca$galaxysentiment <- testingGRC$galaxysentiment
# inspect results
str(trainG.pca)
str(testG.pca)

#MODEL Galaxy PCA
set.seed(2727)
rffitGPCA <- train(galaxysentiment~., data = trainG.pca, method = "rf",
                  trControl = fitControl,
                  preProc = c("center", "scale"))
rffitGPCA

#predict with galaxy PCA test set 
predictrffitGPCA <- predict(rffitGPCA, testG.pca)
predictrffitGPCA
summary(predictrffitGPCA)
postResample(pred = predictrffitGPCA, obs = testG.pca$galaxysentiment)
varImp(rffitGPCA)
#Confusion Matrix with iphoneRCRFE prediction
cmGRCPCA <- confusionMatrix(predictrffitGPCA, testG.pca$galaxysentiment)
cmGRCPCA
